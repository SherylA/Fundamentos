El participante de un concurso tiene que recorrer en su automóvil una ruta determinada desde un
lugar A a un lugar B, entre los cuales hay una distancia que es igual a 4*K kilómetros. Con el depósito
de gasolina lleno, su coche puede recorrer una distancia máxima de K kilómetros. El concursante tiene
un mapa de la ruta que debe recorrer en el que figuran las distancias entre las gasolineras que hay
entre A y B, y planea realizar el viaje con la menor cantidad de paradas posible. Suponiendo que parte
de A con el depósito lleno, y que la distancia máxima entre dos gasolineras consecutivas obedece la
secuencia M(i)=0.1*sqrt(i) para i par y M(i)=0.05*(i)*K - 0.01*K para i impar, desarrollar un algoritmo
eficiente que determine en qué gasolineras deberá parar el concursante.
Entradas: Distancia de D o K
Salida: Plan de viaje
1.  Cargar lib math
2.  Imprimir "El participante de un concurso tiene que recorrer en su automóvil una ruta determinada desde una ciudad A a una ciudad B"
3.  Imprimir "Entre las ciudades hay cierto número de gasolineras y al auto tiene un limite de distacia recorrida usando el tanque lleno." 
4.	Imprimir "Este programa calcula en que gasolineras debe parar para llegar con el menor número de paradas"
5.	Imprimir  "Ingrese la distancia entre la ciudad A y la ciudad B en [Km]" 
6.	Leer D
7.	Si D>=0
8.		Lista M[1000]
9.   	K=D/4.0
10.		Dtemp=0.0
11.		i=1
12.		Mientras Dtemp<D
13.			Si i MOD 2 !=0
14.				M[i]=0.05*K*i-0.01*K
15.				Dtemp=Dtemp+M[i]
16.			Sino 
17.				M[i]=0.1*raiz(i)
18.				Dtemp=Dtemp+M[i]
19.			FinSi
20.			i=i+1
21.		FinMientras
22.		Imprimir "Hay ",i-2," gasolineras entre la ciudad A y la ciudad B y el auto recorre como máximo ",K," [Km]" 
23.		Imprimir " " 
24.		Imprimir "********************************************************************************************" 
25.		Drec=0.0
26.		Para j=1 hasta i-2
27.			Drec=Drec + M[j]
28.			Imprimir "La gasolinera ",j," está a ",M[j]," [Km] de la anterior. Total recorrido ",Drec, " [Km]"
29.		FinPara
30.		Utramo=D-Drec
31.		Drec=Drec + M[i-1]
32.		Imprimir "La gasolinera ",i-1," está a ",M[i-1]," [Km] de la anterior. Total recorrido ",Drec, " [Km]."
33.		Imprimir "Esta gasolinera está más allá de la ciudad B por ", Drec-D," [Km]" 
34.		Imprimir "*********************************************************************************************" 
35.		Imprimir " " 
36.		M[i-1]=Utramo
37.		Drec=0
38.		r=0
39.		j=1
40. 	error=Falso
41.		rep=Falso
42.		Imprimir "************** PLAN DE RECORRIDO *************" 
43.		Mientras (!error  y j<=i-1)
44.			Drec = Drec+M[j] 
45.			r= r + M[j]
46.			Si M[j]>K 
47.				Si j<i-1
48.					Si j==2
49.						Imprimir "Pasa por la gasolinera ",j-1," sin parar. Recorrido ",Drec-M[j]," [Km]"
50.						Imprimir "No se puede llegar a la gasolinera ",j,". Esta a ",M[j]," [Km] y lo máximo que puede recorrer es ",K," Km"
51.						error=Verdadero
52.					SiNo
53.						Imprimir "No se puede llegar a la gasolinera ",j,". Esta a ",M[j]," [Km] y lo máximo que puede recorrer es ",K," Km"
54.						error=Verdadero
55.					FinSi
56.				SiNo
57.			    	Imprimir "No se puede llegar a la Ciudad B. Esta a ",M[j]," [Km] y lo máximo que puede recorrer es ",K," Km"
58.		        	error=Verdadero
59.				FinSi
60.			Sino
61.				Si r>K
62.					Imprimir "-->Se debe parar en la gasolinera ",j-1,". Recorrido ",Drec-M[j]," [Km]"
63.					Imprimir "***Tanquea porque debe recorrer ",M[j]," [Km] y le queda combustible para ",K-r+M[j], " [Km]"
64.					r=0+M[j]
65.				SiNo
66.					Si j>1
67.						Imprimir "Pasa por la gasolinera ",j-1," sin parar. Recorrido ",Drec-M[j]," [Km]"
68.					FinSi
69.				FinSi
70.			FinSi
71.			j=j+1
72.		FinMientras
73.		Si !error
74.			Imprimir "Llega a la ciudad B"
75.		FinSi
76.	SiNo
77.		Imprimir "La distancia debe ser positva mayor que cero."
78.	FinSi
